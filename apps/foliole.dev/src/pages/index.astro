---
import Layout from '../layouts/Layout.astro';
import FolioleLogo from '../components/FolioleLogo.vue';
---

<Layout  title="Welcome to Astro.">
	<div class="flex flex-col p-2 mx-auto space-y-2 text-center hp">
		<div class="rounded-md banner">
			<div class="p-4 m-[.125rem] rounded-md banner-inner space-y-4">
				<h1 class="text-2xl font-bold">Welcome to the Foliole UI - Version Alpha!</h1>
				<p>This is an initial demo site for the Foliole UI Toolkit and library!</p>
				<p>
					Currently, there is an early and incomplete implementation of a Theme Generator, along with basic branding and site design. I am in the process of preparing the foundational CSS and JavaScript framework implementation and making the project ready for group and open-source contributions.
				</p>
				<p>
					Please feel free to share this with others who would like to help and/or provide constructive feedback. There is a ton of work to do, so if you are interested in contributing, please reach out to me at aaron.crockett.00@gmail.com. See more: <a href="/docs/resources/roadmap" class="inline-link">Rough Draft Roadmap.</a>
				</p>
			</div>
		</div>

		<div class="flex flex-col h-full space-x-4">
			<div class="flex flex-col p-4 space-y-8 ">            
				<FolioleLogo logoClasses="foliole-logo foliole-logo-options foliole-logo-vertical" logoH1="foliole-logo-h1 foliole-logo-h1-vertical" logoWrapperClasses="foliole-logo-wrapper flex-col justify-center items-center" />
				<div class="my-4 text-center uppercase">
					<span class="inline-block leading-3 ">the </span><br>
					<h2 class="ui-toolkit-h2 w-auto text-6xl font-bold text-center leading-[3.5rem]">UI Toolkit & Library <br></h2>
				</div>
			
				<div class="mx-auto">
					<ul class="flex flex-col items-center gap-4">
						<li class="hero-card md:w-1/3 ">
							<span class="inline-block w-full text-2xl font-bold">Theme Generator.</span>
							<span class="inline-block">
								Generate colors, proportions, common theme options such as theme roundness, and more.
							</span>
						</li>
						<li class="hero-card md:w-1/2 ">
							<span class="inline-block w-full text-2xl font-bold">Flexible CSS Solutions.</span>
							<span class="inline-block">
								Foliole's CSS solution is built from Elements (CSS Classes for Buttons, Inputs, etc) and CSS Properties, and "Tokens", all of which are pared well with Tailwind, though Tailwind is not required. 
							</span>
						</li>
						<li class="hero-card md:w-2/3">
							<span class="inline-block w-full text-2xl font-bold">Flexible UI Component Libraries.</span>
							<span class="inline-block">
								Foliole is currently being developed for use with Vue and Svelte. Foliole will add additional Frameworks shortly after. Because the library is written to pass in css utility classes rather than individual prop options, we can reduce the need for framework specific prop logic. This makes it easier to develop for mulitple frameworks.
							</span>
						</li>
					</ul>
				</div>
			</div>

		</div>
	</div>
</Layout>
<style>

	/* .hp {		
		background: linear-gradient(
		30deg,
			rgb(var(--color-secondary) / 0.2) 0%,
			rgb(var(--color-secondary) / 0) 35%,
			rgb(var(--color-secondary) / 0) 70%,
			rgb(var(--color-tertiary) / 0.2) 100%
		);
	} */
	.banner {
		background: linear-gradient(
		45deg,
			rgb(var(--color-primary) / 0.5) 0%,
			rgb(var(--color-secondary) / 0.5) 50%,
			rgb(var(--color-tertiary) / 0.5) 100%
		);
	}
	.banner-inner {
		background: linear-gradient(
		45deg,
			rgb(var(--color-primary-light) / 1) 0%,
			rgb(var(--color-secondary-light) / 1) 50%,
			rgb(var(--color-tertiary-light) / 1) 100%
		);
	}
	.ui-toolkit-h2 {
    background: linear-gradient(45deg, rgb(var(--color-primary) / 1), rgb(var(--color-secondary) / 1),  rgb(var(--color-tertiary) / 1));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
	}
	.hero-card {
		@apply p-4 border-[.125rem] rounded border-tertiary-mlt/40;
		background: linear-gradient(
			45deg,
				rgb(var(--color-primary) / 0.05) 0%,
				rgb(var(--color-secondary) / 0.05) 50%,
				rgb(var(--color-tertiary) / 0.05) 100%
			);
}

</style>
